version: 2.1

orbs:
  python: circleci/python@2.1.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    # replicates the local development environment and runs linting
    # and the test suite
    docker:
      - image: cimg/python:3.10.7
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies
    # from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip.
    # By default, it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/
          # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt
          # if you have a different name for your requirements file,
          # maybe one that combines your runtime and test requirements.
      - run:
          name: Linting -> flake8
          command: flake8
      - run:
          name: Run tests
          command: python manage.py test

  containerization:
    # Builds a Docker image of the site
    # and pushes it to the Docker Hub container registry.
    docker:
      - image: cimg/python:3.10.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build images of services declared in docker-compose.yml
          command: docker-compose up -d
      - deploy:
          name: Build and push Docker image
          command: |
            TAG="${CIRCLE_SHA1}"
            docker build -t pascal237/oc_lettings_site_build:$TAG .
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker push pascal237/oc_lettings_site_build:$TAG

  deploy-production:
    machine: true
    steps:
      - checkout
      - run:
          name: Build and push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
            HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push web
            HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release web

workflows:
  oc_lettings_ci/cd:
    jobs:
      - build-and-test
      - containerization
      - deploy-production
